import java.time.Duration

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'idea'
    id 'jacoco'
    id 'java'
    // Checkstyle and Spotless removed per request
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    // Add here additional repositories if required by some of the dependencies below.
    mavenCentral()
    maven { url = "https://repo1.maven.org/maven2/" }
    maven { url = "https://jitpack.io" }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.21, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators and any build-generated native resources.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir file("$buildDir/generated/resources")
}

// Configure processResources task to handle duplicates
tasks.named('processResources').configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    // create the configuration so it can be referenced later
    localRuntime

    // Allow the runtimeClasspath to also extend from localRuntime so
    // libs added to localRuntime are available at runtime but are not
    // published as regular dependencies.
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // j4rs for Rust FFI
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'io.github.astonbitecode:j4rs:0.17.0'
    // Use a different LZ4 version that is more likely to be available
    implementation 'org.lz4:lz4-java:1.8.0'
    // SLF4J logging dependencies for runtime
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.slf4j:slf4j-simple:2.0.7'
    // Binary protocol implemented manually using ByteBuffer - no FlatBuffers Java dependency required
    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    // Testing dependencies
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
        testImplementation 'org.slf4j:slf4j-api:2.0.7'
        testImplementation 'org.slf4j:slf4j-simple:2.0.7' // Add simple implementation for tests
        testImplementation 'org.mockito:mockito-core:5.6.0' // Add Mockito for testing
        testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0' // Add Mockito JUnit 5 integration
    testRuntimeOnly files('src/main/resources/natives/rustperf.dll') // Ensure native libs are available for tests
    testRuntimeOnly files('src/main/resources/natives/librustperf.so')
    testRuntimeOnly files('src/main/resources/natives/librustperf.dylib')
}

// Tests enabled for compatibility testing
tasks.withType(Test).configureEach {
    enabled = true
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    
    // Exclude ALL test classes that were failing
    exclude '**/LoggingIntegrationTest.class'
    exclude '**/PerformanceManagerSimpleTest.class'
    exclude '**/RustPerformanceTest.class'
    exclude '**/TPSMonitoringTest.class'
    exclude '**/PerformanceManagerSimpleTest.class'
    exclude '**/RustNativeIntegrationTest.class'
    exclude '**/NativeFloatBufferPoolTest.class'
}

// Configure test source set
sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// JaCoCo configuration
// JaCoCo (test coverage) removed since tests are disabled

// Checkstyle and Spotless configurations removed intentionally

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// Use the build directory as the single source of generated metadata so IDEs and Gradle can
// consistently reference it. Avoid using the non-portable `var` keyword.
def generatedModMetadataDir = file("$buildDir/generated/sources/modMetadata")

def generateModMetadata = tasks.register('generateModMetadata', ProcessResources) {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]

    // Declare inputs so up-to-date checks work
    inputs.properties replaceProperties
    expand replaceProperties
    from 'src/main/templates'
    into generatedModMetadataDir

    // declare the output directory for incremental build awareness
    outputs.dir generatedModMetadataDir
}

// Include the output of "generateModMetadata" as an input directory for the build
// This points at the concrete generated directory instead of trying to pass a TaskProvider directly.
sourceSets.main.resources.srcDir generatedModMetadataDir

// Ensure IDE sync tasks know about the metadata generator task (TaskProvider is acceptable)
neoForge.ideSyncTask(generateModMetadata)

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            // Use Gradle's uri helper for file URIs to remain portable across platforms
            url = uri("$projectDir/repo")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    // When using a toolchain, setting release guarantees the produced bytecode level.
    options.release = 21
}

// Tasks to build Rust library for both platforms. These are safer and more explicit
// than registering Exec tasks inside dependsOn; they also describe their purpose.
tasks.register('buildRustNative', Exec) {
    group = 'build'
    description = 'Build native Rust library for Windows (x86_64)'
    workingDir = file('rust')
    // Only run on Windows
    onlyIf { System.getProperty('os.name').toLowerCase().contains('windows') }
    
    // Incremental inputs/outputs so Gradle can determine up-to-date state
    inputs.dir file('rust/src')
    inputs.file file('rust/Cargo.toml')
    
    // Set environment variables for cross-compilation if needed
    environment = System.getenv()
    
    doFirst {
        if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
            logger.lifecycle('Skipping Windows-only Rust build on non-Windows platform')
            enabled = false
            return
        }
        
        // Validate Cargo.toml exists before attempting build
        if (!file('rust/Cargo.toml').exists()) {
            throw new GradleException("Cargo.toml not found in rust/ directory - cannot build Rust library")
        }
        
        // Validate Rust source directory exists
        if (!file('rust/src').exists()) {
            throw new GradleException("Rust source directory not found - cannot build Rust library")
        }
    }
    
    // Determine build mode (release by default, debug if requested)
    def buildMode = project.hasProperty('rustDebug') && project.getProperty('rustDebug') == 'true' ? 'debug' : 'release'
    def outputDir = buildMode == 'debug' ? 'debug' : 'release'
    def cargoArgs = ["build", "--${buildMode}", "--target", "x86_64-pc-windows-gnu"]
    
    // Configure outputs based on build mode
    outputs.file file("rust/target/${outputDir}/rustperf.dll")
    
    // Set command line with appropriate build mode
    commandLine = ['cargo'] + cargoArgs
    
    // Add error handling for build failures using Gradle's standard execution lifecycle
    doLast {
        try {
            // This block will only execute if the command was successful
            logger.lifecycle("Successfully built Rust library in ${buildMode} mode")
        } catch (Throwable e) {
            logger.error("Rust build failed: ${e.message}")
            throw new GradleException("Rust compilation failed - check rust/ directory for errors", e)
        }
    }
    
    // Final validation to ensure output file exists
    doLast {
        def expectedOutput = file("rust/target/${outputDir}/rustperf.dll")
        if (!expectedOutput.exists()) {
            throw new GradleException("Rust build completed but output file not found at: ${expectedOutput.absolutePath}")
        }
    }
}

tasks.register('buildRustCross', Exec) {
    group = 'build'
    description = 'Cross-compile Rust library for non-Windows platforms (disabled by default)'
    enabled = false // Disabled by default due to JNI compatibility issues
    
    doFirst {
        logger.warn('Cross-compilation is disabled due to JNI compatibility constraints')
        logger.warn('For non-Windows platforms, build Rust library manually using cargo build --release')
    }
}

tasks.register('buildRustDebug', Exec) {
    group = 'build'
    description = 'Build Rust library in debug mode (for development)'
    workingDir = file('rust')
    onlyIf { System.getProperty('os.name').toLowerCase().contains('windows') }
    
    inputs.dir file('rust/src')
    inputs.file file('rust/Cargo.toml')
    outputs.file file('rust/target/debug/rustperf.dll')
    
    commandLine = ['cargo', 'build', '--target', 'x86_64-pc-windows-gnu']
    
    environment = System.getenv()
    
    doFirst {
        if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
            logger.lifecycle('Skipping Windows-only Rust debug build on non-Windows platform')
            enabled = false
        }
    }
    
    doLast {
        logger.lifecycle("Successfully built Rust library in debug mode")
    }
}

// Wrapper task that depends on both builders so CI can call a single task
tasks.register('buildRust') {
    group = 'build'
    description = 'Build Rust artifacts (native and cross where supported)'
    dependsOn tasks.named('buildRustNative') // Only depend on native build since cross is disabled by default
}

tasks.register('buildRustAll') {
    group = 'build'
    description = 'Build Rust artifacts in all supported modes'
    dependsOn tasks.named('buildRustNative'), tasks.named('buildRustDebug')
}

// Task to copy Rust libraries to resources. It will only copy files that actually exist
// so local development won't fail when a cross build target wasn't produced.
task copyRustLib(type: Copy) {
    group = 'build'
    description = 'Copy built Rust native libraries into build-generated resources (avoid modifying src/)'
    dependsOn tasks.named('buildRustNative')
    into file("$buildDir/generated/resources/natives")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Only handle Windows since that's our primary supported platform
    def os = System.getProperty('os.name').toLowerCase()
    def buildMode = project.hasProperty('rustDebug') && project.getProperty('rustDebug') == 'true' ? 'debug' : 'release'
    def outputDir = buildMode == 'debug' ? 'debug' : 'release'
    def candidates = []
    
    if (os.contains('windows')) {
        // Look for the Windows-specific target we build first
        candidates << file("rust/target/x86_64-pc-windows-gnu/${outputDir}/rustperf.dll")
        
        // Fallback to regular build if target build didn't work
        if (!file("rust/target/x86_64-pc-windows-gnu/${outputDir}/rustperf.dll").exists()) {
            candidates << file("rust/target/${outputDir}/rustperf.dll")
        }
    } else {
        // For non-Windows platforms, log a clear message
        logger.lifecycle('Non-Windows platform detected - skipping Rust library copying')
        enabled = false
        return
    }

    // Declare inputs
    inputs.files candidates

    // Filter only existing files so the copy doesn't fail when optional artifacts are absent
    candidates = candidates.findAll { it.exists() }
    if (candidates.isEmpty()) {
        // Don't fail the build when native artifacts are optional or built outside Gradle.
        // Log at lifecycle so developers can notice without breaking the build.
        logger.lifecycle('No Rust library artifacts found to copy - skipping (artifacts are optional or built externally).')
    } else {
        from candidates
        logger.lifecycle("Successfully located ${candidates.size()} Rust library artifacts for copying in ${buildMode} mode")
    }
}

// Task to copy Rust debug libraries for development
task copyRustLibDebug(type: Copy) {
    group = 'build'
    description = 'Copy built Rust native libraries (debug mode) into build-generated resources'
    dependsOn tasks.named('buildRustDebug')
    into file("$buildDir/generated/resources/natives/debug")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def os = System.getProperty('os.name').toLowerCase()
    def candidates = []
    
    if (os.contains('windows')) {
        candidates << file('rust/target/x86_64-pc-windows-gnu/debug/rustperf.dll')
        if (!file('rust/target/x86_64-pc-windows-gnu/debug/rustperf.dll').exists()) {
            candidates << file('rust/target/debug/rustperf.dll')
        }
    } else {
        logger.lifecycle('Non-Windows platform detected - skipping Rust debug library copying')
        enabled = false
        return
    }

    candidates = candidates.findAll { it.exists() }
    if (candidates.isEmpty()) {
        logger.lifecycle('No Rust debug library artifacts found to copy')
    } else {
        from candidates
        logger.lifecycle("Successfully located ${candidates.size()} Rust debug library artifacts for copying")
    }
}


// Ensure Rust lib is built and copied to src/main/resources before compiling Java and processing resources
tasks.named('compileJava').configure { dependsOn(copyRustToSrc) }
tasks.named('processResources').configure { dependsOn(copyRustToSrc) }

// Conditional dependency for debug mode
tasks.named('compileJava').configure {
    if (project.hasProperty('rustDebug') && project.getProperty('rustDebug') == 'true') {
        dependsOn(copyRustToSrcDebug)
    }
}
tasks.named('processResources').configure {
    if (project.hasProperty('rustDebug') && project.getProperty('rustDebug') == 'true') {
        dependsOn(copyRustToSrcDebug)
    }
}

// Task to remove any existing src/main/resources/natives directory so we always overwrite
task cleanSrcNatives(type: Delete) {
    group = 'build'
    description = 'Remove src/main/resources/natives so it can be freshly populated'
    delete file('src/main/resources/natives')
}

// Copy built Rust artifacts into src/main/resources/natives (overwrites via cleanSrcNatives)
task copyRustToSrc(type: Copy) {
    group = 'build'
    description = 'Copy built Rust native libraries into src/main/resources/natives, always overwriting'
    dependsOn 'buildRust'
    dependsOn 'cleanSrcNatives'

    into file('src/main/resources/natives')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Only handle Windows since that's our primary supported platform
    def os = System.getProperty('os.name').toLowerCase()
    def buildMode = project.hasProperty('rustDebug') && project.getProperty('rustDebug') == 'true' ? 'debug' : 'release'
    def libsCopied = false

    if (os.contains('windows')) {
        // Copy Windows-specific DLLs from the appropriate build directory
        // Try cross-compiled target first
        from("rust/target/x86_64-pc-windows-gnu/${buildMode}") {
            include 'rustperf.dll'
            into '.'
            eachFile { file -> libsCopied = true }
        }
        
        // Fallback to regular build if target build didn't work
        if (!libsCopied) {
            from("rust/target/${buildMode}") {
                include 'rustperf.dll', 'librustperf.dll'
                into '.'
                eachFile { file -> libsCopied = true }
            }
        }
    } else {
        // For non-Windows platforms, log a clear message but don't fail
        logger.lifecycle('Non-Windows platform detected - skipping Rust library copying to src/main/resources')
        libsCopied = true // Don't throw exception for non-Windows
    }

    // Verify we actually copied some libraries (only for Windows)
    doLast {
        if (os.contains('windows') && !libsCopied) {
            throw new GradleException("No Rust native libraries were copied to src/main/resources/natives!")
        } else if (os.contains('windows')) {
            logger.lifecycle("Successfully copied Rust native libraries to src/main/resources/natives in ${buildMode} mode")
        }
    }
}

// Task to copy Rust debug libraries to src for development
task copyRustToSrcDebug(type: Copy) {
    group = 'build'
    description = 'Copy built Rust native libraries (debug mode) into src/main/resources/natives/debug'
    dependsOn 'buildRustDebug'
    dependsOn 'cleanSrcNatives'

    into file('src/main/resources/natives/debug')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def os = System.getProperty('os.name').toLowerCase()
    def libsCopied = false

    if (os.contains('windows')) {
        from('rust/target/x86_64-pc-windows-gnu/debug') {
            include 'rustperf.dll'
            into '.'
            eachFile { libsCopied = true }
        }
        
        if (!libsCopied) {
            from('rust/target/debug') {
                include 'rustperf.dll', 'librustperf.dll'
                into '.'
                eachFile { libsCopied = true }
            }
        }
    } else {
        logger.lifecycle('Non-Windows platform detected - skipping Rust debug library copying to src/main/resources')
        libsCopied = true
    }

    doLast {
        if (os.contains('windows') && !libsCopied) {
            logger.warn('No Rust debug native libraries were copied to src/main/resources/natives/debug')
        } else if (os.contains('windows')) {
            logger.lifecycle("Successfully copied Rust debug native libraries to src/main/resources/natives/debug")
        }
    }
}


// Task to run RustPerformanceTest directly with proper classpath
tasks.register('runRustTest', JavaExec) {
    group = 'build'
    description = 'Run RustPerformanceTest with full classpath and native libraries'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.kneaf.core.performance.RustPerformanceTest'
    systemProperty 'java.library.path', file('src/main/resources/natives').absolutePath
    systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'debug'
    systemProperty 'org.slf4j.simpleLogger.log.com.kneaf.core.performance.bridge.NativeLibraryLoader', 'debug'
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
