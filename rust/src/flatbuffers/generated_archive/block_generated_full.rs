// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;


use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kneaf {

  use core::mem;
  use core::cmp::Ordering;

  
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod block {

  use core::mem;
  use core::cmp::Ordering;

  
  use self::flatbuffers::{EndianScalar, Follow};

pub enum BlockEntityDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlockEntityData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockEntityData<'a> {
  type Inner = BlockEntityData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BlockEntityData<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_BLOCK_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DISTANCE: flatbuffers::VOffsetT = 8;
  pub const VT_X: flatbuffers::VOffsetT = 10;
  pub const VT_Y: flatbuffers::VOffsetT = 12;
  pub const VT_Z: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BlockEntityData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BlockEntityDataArgs<'args>
  ) -> flatbuffers::WIPOffset<BlockEntityData<'bldr>> {
    let mut builder = BlockEntityDataBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.add_z(args.z);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.add_distance(args.distance);
    if let Some(x) = args.block_type { builder.add_block_type(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    unsafe { self._tab.get::<u64>(BlockEntityData::VT_ID, Some(0)).unwrap() }
  }
  #[inline]
  pub fn block_type(&self) -> Option<&'a str> {
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BlockEntityData::VT_BLOCK_TYPE, None) }
  }
  #[inline]
  pub fn distance(&self) -> f32 {
    unsafe { self._tab.get::<f32>(BlockEntityData::VT_DISTANCE, Some(0.0)).unwrap() }
  }
  #[inline]
  pub fn x(&self) -> i32 {
    unsafe { self._tab.get::<i32>(BlockEntityData::VT_X, Some(0)).unwrap() }
  }
  #[inline]
  pub fn y(&self) -> i32 {
    unsafe { self._tab.get::<i32>(BlockEntityData::VT_Y, Some(0)).unwrap() }
  }
  #[inline]
  pub fn z(&self) -> i32 {
    unsafe { self._tab.get::<i32>(BlockEntityData::VT_Z, Some(0)).unwrap() }
  }
}

impl flatbuffers::Verifiable for BlockEntityData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("block_type", Self::VT_BLOCK_TYPE, false)?
     .visit_field::<f32>("distance", Self::VT_DISTANCE, false)?
     .visit_field::<i32>("x", Self::VT_X, false)?
     .visit_field::<i32>("y", Self::VT_Y, false)?
     .visit_field::<i32>("z", Self::VT_Z, false)?
     .finish();
    Ok(())
  }
}
pub struct BlockEntityDataArgs<'a> {
    pub id: u64,
    pub block_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub distance: f32,
    pub x: i32,
    pub y: i32,
    pub z: i32,
}
impl<'a> Default for BlockEntityDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    BlockEntityDataArgs {
      id: 0,
      block_type: None,
      distance: 0.0,
      x: 0,
      y: 0,
      z: 0,
    }
  }
}

pub struct BlockEntityDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BlockEntityDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(BlockEntityData::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_block_type(&mut self, block_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BlockEntityData::VT_BLOCK_TYPE, block_type);
  }
  #[inline]
  pub fn add_distance(&mut self, distance: f32) {
    self.fbb_.push_slot::<f32>(BlockEntityData::VT_DISTANCE, distance, 0.0);
  }
  #[inline]
  pub fn add_x(&mut self, x: i32) {
    self.fbb_.push_slot::<i32>(BlockEntityData::VT_X, x, 0);
  }
  #[inline]
  pub fn add_y(&mut self, y: i32) {
    self.fbb_.push_slot::<i32>(BlockEntityData::VT_Y, y, 0);
  }
  #[inline]
  pub fn add_z(&mut self, z: i32) {
    self.fbb_.push_slot::<i32>(BlockEntityData::VT_Z, z, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BlockEntityDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BlockEntityDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BlockEntityData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BlockEntityData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BlockEntityData");
      ds.field("id", &self.id());
      ds.field("block_type", &self.block_type());
      ds.field("distance", &self.distance());
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("z", &self.z());
      ds.finish()
  }
}

... (truncated for brevity) ...
