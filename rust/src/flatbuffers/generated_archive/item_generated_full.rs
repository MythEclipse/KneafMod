// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;


use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kneaf {

  use core::mem;
  use core::cmp::Ordering;

  
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod item {

  use core::mem;
  use core::cmp::Ordering;

  
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ItemEntityDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ItemEntityData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemEntityData<'a> {
  type Inner = ItemEntityData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemEntityData<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ITEM: flatbuffers::VOffsetT = 6;
  pub const VT_PICKUP_DELAY: flatbuffers::VOffsetT = 8;
  pub const VT_POS_X: flatbuffers::VOffsetT = 10;
  pub const VT_POS_Y: flatbuffers::VOffsetT = 12;
  pub const VT_POS_Z: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemEntityData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ItemEntityDataArgs<'args>
  ) -> flatbuffers::WIPOffset<ItemEntityData<'bldr>> {
    let mut builder = ItemEntityDataBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.add_pos_z(args.pos_z);
    builder.add_pos_y(args.pos_y);
    builder.add_pos_x(args.pos_x);
    builder.add_pickup_delay(args.pickup_delay);
    if let Some(x) = args.item { builder.add_item(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    unsafe { self._tab.get::<u64>(ItemEntityData::VT_ID, Some(0)).unwrap() }
  }
  #[inline]
  pub fn item(&self) -> Option<&'a str> {
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemEntityData::VT_ITEM, None) }
  }
  #[inline]
  pub fn pickup_delay(&self) -> i32 {
    unsafe { self._tab.get::<i32>(ItemEntityData::VT_PICKUP_DELAY, Some(0)).unwrap() }
  }
  #[inline]
  pub fn pos_x(&self) -> f32 {
    unsafe { self._tab.get::<f32>(ItemEntityData::VT_POS_X, Some(0.0)).unwrap() }
  }
  #[inline]
  pub fn pos_y(&self) -> f32 {
    unsafe { self._tab.get::<f32>(ItemEntityData::VT_POS_Y, Some(0.0)).unwrap() }
  }
  #[inline]
  pub fn pos_z(&self) -> f32 {
    unsafe { self._tab.get::<f32>(ItemEntityData::VT_POS_Z, Some(0.0)).unwrap() }
  }
}

impl flatbuffers::Verifiable for ItemEntityData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("item", Self::VT_ITEM, false)?
     .visit_field::<i32>("pickup_delay", Self::VT_PICKUP_DELAY, false)?
     .visit_field::<f32>("pos_x", Self::VT_POS_X, false)?
     .visit_field::<f32>("pos_y", Self::VT_POS_Y, false)?
     .visit_field::<f32>("pos_z", Self::VT_POS_Z, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemEntityDataArgs<'a> {
    pub id: u64,
    pub item: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pickup_delay: i32,
    pub pos_x: f32,
    pub pos_y: f32,
    pub pos_z: f32,
}
impl<'a> Default for ItemEntityDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    ItemEntityDataArgs {
      id: 0,
      item: None,
      pickup_delay: 0,
      pos_x: 0.0,
      pos_y: 0.0,
      pos_z: 0.0,
    }
  }
}

pub struct ItemEntityDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ItemEntityDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(ItemEntityData::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_item(&mut self, item: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemEntityData::VT_ITEM, item);
  }
  #[inline]
  pub fn add_pickup_delay(&mut self, pickup_delay: i32) {
    self.fbb_.push_slot::<i32>(ItemEntityData::VT_PICKUP_DELAY, pickup_delay, 0);
  }
  #[inline]
  pub fn add_pos_x(&mut self, pos_x: f32) {
    self.fbb_.push_slot::<f32>(ItemEntityData::VT_POS_X, pos_x, 0.0);
  }
  #[inline]
  pub fn add_pos_y(&mut self, pos_y: f32) {
    self.fbb_.push_slot::<f32>(ItemEntityData::VT_POS_Y, pos_y, 0.0);
  }
  #[inline]
  pub fn add_pos_z(&mut self, pos_z: f32) {
    self.fbb_.push_slot::<f32>(ItemEntityData::VT_POS_Z, pos_z, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ItemEntityDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ItemEntityDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemEntityData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemEntityData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemEntityData");
      ds.field("id", &self.id());
      ds.field("item", &self.item());
      ds.field("pickup_delay", &self.pickup_delay());
      ds.field("pos_x", &self.pos_x());
      ds.field("pos_y", &self.pos_y());
      ds.field("pos_z", &self.pos_z());
      ds.finish()
  }
}

... (truncated for brevity) ...
