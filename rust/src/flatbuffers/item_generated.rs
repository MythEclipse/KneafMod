// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;


use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kneaf {

  use core::mem;
  use core::cmp::Ordering;

  
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod item {

  use core::mem;
  use core::cmp::Ordering;

  
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ItemEntityDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ItemEntityData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemEntityData<'a> {
  type Inner = ItemEntityData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemEntityData<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ITEM_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_COUNT: flatbuffers::VOffsetT = 8;
  pub const VT_AGE_SECONDS: flatbuffers::VOffsetT = 10;
  pub const VT_CHUNK_X: flatbuffers::VOffsetT = 12;
  pub const VT_CHUNK_Z: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemEntityData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ItemEntityDataArgs<'args>
  ) -> flatbuffers::WIPOffset<ItemEntityData<'bldr>> {
    let mut builder = ItemEntityDataBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.add_chunk_z(args.chunk_z);
    builder.add_chunk_x(args.chunk_x);
    builder.add_age_seconds(args.age_seconds);
    builder.add_count(args.count);
    if let Some(x) = args.item_type { builder.add_item_type(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    unsafe { self._tab.get::<u64>(ItemEntityData::VT_ID, Some(0)).unwrap() }
  }
  #[inline]
  pub fn item_type(&self) -> Option<&'a str> {
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemEntityData::VT_ITEM_TYPE, None) }
  }
  #[inline]
  pub fn count(&self) -> u32 {
    unsafe { self._tab.get::<u32>(ItemEntityData::VT_COUNT, Some(0)).unwrap() }
  }
  #[inline]
  pub fn age_seconds(&self) -> u32 {
    unsafe { self._tab.get::<u32>(ItemEntityData::VT_AGE_SECONDS, Some(0)).unwrap() }
  }
  #[inline]
  pub fn chunk_x(&self) -> i32 {
    unsafe { self._tab.get::<i32>(ItemEntityData::VT_CHUNK_X, Some(0)).unwrap() }
  }
  #[inline]
  pub fn chunk_z(&self) -> i32 {
    unsafe { self._tab.get::<i32>(ItemEntityData::VT_CHUNK_Z, Some(0)).unwrap() }
  }
}

impl flatbuffers::Verifiable for ItemEntityData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("item_type", Self::VT_ITEM_TYPE, false)?
     .visit_field::<u32>("count", Self::VT_COUNT, false)?
     .visit_field::<u32>("age_seconds", Self::VT_AGE_SECONDS, false)?
     .visit_field::<i32>("chunk_x", Self::VT_CHUNK_X, false)?
     .visit_field::<i32>("chunk_z", Self::VT_CHUNK_Z, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemEntityDataArgs<'a> {
    pub id: u64,
    pub item_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub count: u32,
    pub age_seconds: u32,
    pub chunk_x: i32,
    pub chunk_z: i32,
}
impl<'a> Default for ItemEntityDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    ItemEntityDataArgs {
      id: 0,
      item_type: None,
      count: 0,
      age_seconds: 0,
      chunk_x: 0,
      chunk_z: 0,
    }
  }
}

pub struct ItemEntityDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ItemEntityDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(ItemEntityData::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_item_type(&mut self, item_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemEntityData::VT_ITEM_TYPE, item_type);
  }
  #[inline]
  pub fn add_count(&mut self, count: u32) {
    self.fbb_.push_slot::<u32>(ItemEntityData::VT_COUNT, count, 0);
  }
  #[inline]
  pub fn add_age_seconds(&mut self, age_seconds: u32) {
    self.fbb_.push_slot::<u32>(ItemEntityData::VT_AGE_SECONDS, age_seconds, 0);
  }
  #[inline]
  pub fn add_chunk_x(&mut self, chunk_x: i32) {
    self.fbb_.push_slot::<i32>(ItemEntityData::VT_CHUNK_X, chunk_x, 0);
  }
  #[inline]
  pub fn add_chunk_z(&mut self, chunk_z: i32) {
    self.fbb_.push_slot::<i32>(ItemEntityData::VT_CHUNK_Z, chunk_z, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ItemEntityDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ItemEntityDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemEntityData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemEntityData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemEntityData");
      ds.field("id", &self.id());
      ds.field("item_type", &self.item_type());
      ds.field("count", &self.count());
      ds.field("age_seconds", &self.age_seconds());
      ds.field("chunk_x", &self.chunk_x());
      ds.field("chunk_z", &self.chunk_z());
      ds.finish()
  }
}
pub enum ItemInputOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ItemInput<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemInput<'a> {
  type Inner = ItemInput<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemInput<'a> {
  pub const VT_ITEMS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemInput { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ItemInputArgs<'args>
  ) -> flatbuffers::WIPOffset<ItemInput<'bldr>> {
    let mut builder = ItemInputBuilder::new(_fbb);
    if let Some(x) = args.items { builder.add_items(x); }
    builder.finish()
  }


  #[inline]
  pub fn items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ItemEntityData<'a>>>> {
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ItemEntityData>>>>(ItemInput::VT_ITEMS, None) }
  }
}

impl flatbuffers::Verifiable for ItemInput<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ItemEntityData>>>>("items", Self::VT_ITEMS, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemInputArgs<'a> {
    pub items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ItemEntityData<'a>>>>>,
}
impl<'a> Default for ItemInputArgs<'a> {
  #[inline]
  fn default() -> Self {
    ItemInputArgs {
      items: None,
    }
  }
}

pub struct ItemInputBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ItemInputBuilder<'a, 'b> {
  #[inline]
  pub fn add_items(&mut self, items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ItemEntityData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemInput::VT_ITEMS, items);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ItemInputBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ItemInputBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemInput<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemInput<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemInput");
      ds.field("items", &self.items());
      ds.finish()
  }
}
pub enum ItemUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ItemUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemUpdate<'a> {
  type Inner = ItemUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemUpdate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NEW_COUNT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ItemUpdateArgs
  ) -> flatbuffers::WIPOffset<ItemUpdate<'bldr>> {
    let mut builder = ItemUpdateBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.add_new_count(args.new_count);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    unsafe { self._tab.get::<u64>(ItemUpdate::VT_ID, Some(0)).unwrap() }
  }
  #[inline]
  pub fn new_count(&self) -> u32 {
    unsafe { self._tab.get::<u32>(ItemUpdate::VT_NEW_COUNT, Some(0)).unwrap() }
  }
}

impl flatbuffers::Verifiable for ItemUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<u32>("new_count", Self::VT_NEW_COUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemUpdateArgs {
    pub id: u64,
    pub new_count: u32,
}
impl<'a> Default for ItemUpdateArgs {
  #[inline]
  fn default() -> Self {
    ItemUpdateArgs {
      id: 0,
      new_count: 0,
    }
  }
}

pub struct ItemUpdateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ItemUpdateBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(ItemUpdate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_new_count(&mut self, new_count: u32) {
    self.fbb_.push_slot::<u32>(ItemUpdate::VT_NEW_COUNT, new_count, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ItemUpdateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ItemUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemUpdate");
      ds.field("id", &self.id());
      ds.field("new_count", &self.new_count());
      ds.finish()
  }
}
pub enum ItemProcessResultOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ItemProcessResult<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemProcessResult<'a> {
  type Inner = ItemProcessResult<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemProcessResult<'a> {
  pub const VT_ITEMS_TO_REMOVE: flatbuffers::VOffsetT = 4;
  pub const VT_MERGED_COUNT: flatbuffers::VOffsetT = 6;
  pub const VT_DESPAWNED_COUNT: flatbuffers::VOffsetT = 8;
  pub const VT_ITEM_UPDATES: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemProcessResult { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ItemProcessResultArgs<'args>
  ) -> flatbuffers::WIPOffset<ItemProcessResult<'bldr>> {
    let mut builder = ItemProcessResultBuilder::new(_fbb);
    builder.add_despawned_count(args.despawned_count);
    builder.add_merged_count(args.merged_count);
    if let Some(x) = args.item_updates { builder.add_item_updates(x); }
    if let Some(x) = args.items_to_remove { builder.add_items_to_remove(x); }
    builder.finish()
  }


  #[inline]
  pub fn items_to_remove(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(ItemProcessResult::VT_ITEMS_TO_REMOVE, None) }
  }
  #[inline]
  pub fn merged_count(&self) -> u64 {
    unsafe { self._tab.get::<u64>(ItemProcessResult::VT_MERGED_COUNT, Some(0)).unwrap() }
  }
  #[inline]
  pub fn despawned_count(&self) -> u64 {
    unsafe { self._tab.get::<u64>(ItemProcessResult::VT_DESPAWNED_COUNT, Some(0)).unwrap() }
  }
  #[inline]
  pub fn item_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ItemUpdate<'a>>>> {
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ItemUpdate>>>>(ItemProcessResult::VT_ITEM_UPDATES, None) }
  }
}

impl flatbuffers::Verifiable for ItemProcessResult<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("items_to_remove", Self::VT_ITEMS_TO_REMOVE, false)?
     .visit_field::<u64>("merged_count", Self::VT_MERGED_COUNT, false)?
     .visit_field::<u64>("despawned_count", Self::VT_DESPAWNED_COUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ItemUpdate>>>>("item_updates", Self::VT_ITEM_UPDATES, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemProcessResultArgs<'a> {
    pub items_to_remove: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub merged_count: u64,
    pub despawned_count: u64,
    pub item_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ItemUpdate<'a>>>>>,
}
impl<'a> Default for ItemProcessResultArgs<'a> {
  #[inline]
  fn default() -> Self {
    ItemProcessResultArgs {
      items_to_remove: None,
      merged_count: 0,
      despawned_count: 0,
      item_updates: None,
    }
  }
}

pub struct ItemProcessResultBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ItemProcessResultBuilder<'a, 'b> {
  #[inline]
  pub fn add_items_to_remove(&mut self, items_to_remove: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemProcessResult::VT_ITEMS_TO_REMOVE, items_to_remove);
  }
  #[inline]
  pub fn add_merged_count(&mut self, merged_count: u64) {
    self.fbb_.push_slot::<u64>(ItemProcessResult::VT_MERGED_COUNT, merged_count, 0);
  }
  #[inline]
  pub fn add_despawned_count(&mut self, despawned_count: u64) {
    self.fbb_.push_slot::<u64>(ItemProcessResult::VT_DESPAWNED_COUNT, despawned_count, 0);
  }
  #[inline]
  pub fn add_item_updates(&mut self, item_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ItemUpdate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemProcessResult::VT_ITEM_UPDATES, item_updates);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ItemProcessResultBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ItemProcessResultBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemProcessResult<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemProcessResult<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemProcessResult");
      ds.field("items_to_remove", &self.items_to_remove());
      ds.field("merged_count", &self.merged_count());
      ds.field("despawned_count", &self.despawned_count());
      ds.field("item_updates", &self.item_updates());
      ds.finish()
  }
}
pub enum ItemConfigOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ItemConfig<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemConfig<'a> {
  type Inner = ItemConfig<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemConfig<'a> {
  pub const VT_MERGE_ENABLED: flatbuffers::VOffsetT = 4;
  pub const VT_MAX_ITEMS_PER_CHUNK: flatbuffers::VOffsetT = 6;
  pub const VT_DESPAWN_TIME_SECONDS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemConfig { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ItemConfigArgs
  ) -> flatbuffers::WIPOffset<ItemConfig<'bldr>> {
    let mut builder = ItemConfigBuilder::new(_fbb);
    builder.add_despawn_time_seconds(args.despawn_time_seconds);
    builder.add_max_items_per_chunk(args.max_items_per_chunk);
    builder.add_merge_enabled(args.merge_enabled);
    builder.finish()
  }


  #[inline]
  pub fn merge_enabled(&self) -> bool {
    unsafe { self._tab.get::<bool>(ItemConfig::VT_MERGE_ENABLED, Some(false)).unwrap() }
  }
  #[inline]
  pub fn max_items_per_chunk(&self) -> u32 {
    unsafe { self._tab.get::<u32>(ItemConfig::VT_MAX_ITEMS_PER_CHUNK, Some(0)).unwrap() }
  }
  #[inline]
  pub fn despawn_time_seconds(&self) -> u32 {
    unsafe { self._tab.get::<u32>(ItemConfig::VT_DESPAWN_TIME_SECONDS, Some(0)).unwrap() }
  }
}

impl flatbuffers::Verifiable for ItemConfig<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("merge_enabled", Self::VT_MERGE_ENABLED, false)?
     .visit_field::<u32>("max_items_per_chunk", Self::VT_MAX_ITEMS_PER_CHUNK, false)?
     .visit_field::<u32>("despawn_time_seconds", Self::VT_DESPAWN_TIME_SECONDS, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemConfigArgs {
    pub merge_enabled: bool,
    pub max_items_per_chunk: u32,
    pub despawn_time_seconds: u32,
}
impl<'a> Default for ItemConfigArgs {
  #[inline]
  fn default() -> Self {
    ItemConfigArgs {
      merge_enabled: false,
      max_items_per_chunk: 0,
      despawn_time_seconds: 0,
    }
  }
}

pub struct ItemConfigBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ItemConfigBuilder<'a, 'b> {
  #[inline]
  pub fn add_merge_enabled(&mut self, merge_enabled: bool) {
    self.fbb_.push_slot::<bool>(ItemConfig::VT_MERGE_ENABLED, merge_enabled, false);
  }
  #[inline]
  pub fn add_max_items_per_chunk(&mut self, max_items_per_chunk: u32) {
    self.fbb_.push_slot::<u32>(ItemConfig::VT_MAX_ITEMS_PER_CHUNK, max_items_per_chunk, 0);
  }
  #[inline]
  pub fn add_despawn_time_seconds(&mut self, despawn_time_seconds: u32) {
    self.fbb_.push_slot::<u32>(ItemConfig::VT_DESPAWN_TIME_SECONDS, despawn_time_seconds, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ItemConfigBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ItemConfigBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemConfig<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemConfig<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemConfig");
      ds.field("merge_enabled", &self.merge_enabled());
      ds.field("max_items_per_chunk", &self.max_items_per_chunk());
      ds.field("despawn_time_seconds", &self.despawn_time_seconds());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_item_input<'a>(buf: &'a [u8]) -> ItemInput<'a> {
  unsafe { flatbuffers::root_unchecked::<ItemInput<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_item_input<'a>(buf: &'a [u8]) -> ItemInput<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<ItemInput<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `ItemInput`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_input_unchecked`.
pub fn root_as_item_input(buf: &[u8]) -> Result<ItemInput, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ItemInput>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ItemInput` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_item_input_unchecked`.
pub fn size_prefixed_root_as_item_input(buf: &[u8]) -> Result<ItemInput, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ItemInput>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ItemInput` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_input_unchecked`.
pub fn root_as_item_input_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ItemInput<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ItemInput<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ItemInput` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_input_unchecked`.
pub fn size_prefixed_root_as_item_input_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ItemInput<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ItemInput<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ItemInput and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ItemInput`.
pub unsafe fn root_as_item_input_unchecked(buf: &[u8]) -> ItemInput {
  flatbuffers::root_unchecked::<ItemInput>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ItemInput and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ItemInput`.
pub unsafe fn size_prefixed_root_as_item_input_unchecked(buf: &[u8]) -> ItemInput {
  flatbuffers::size_prefixed_root_unchecked::<ItemInput>(buf)
}
#[inline]
pub fn finish_item_input_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ItemInput<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_item_input_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ItemInput<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod item
}  // pub mod kneaf

